﻿schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Petition {
  PK: ID!
  createdAt: AWSDateTime!
  owner: ID!
  signatureSummary: SignatureSummary
  signatures(query: SignaturesOfPetitionInput): SignatureConnection!
  status: PetitionStatus!
  type: PetitionType!
  updatedAt: AWSDateTime!
  version: Int!
}

type AddressData @aws_cognito_user_pools @aws_iam {
  address: String!
  city: String
  number: String
  state: String!
  zipCode: String
}

type CandidatePetition implements Petition @aws_cognito_user_pools @aws_iam {
  PK: ID!
  address: AddressData!
  createdAt: AWSDateTime!
  name: String!
  office: ID!
  owner: ID!
  party: ID!
  signatureSummary: SignatureSummary
  signatures(query: SignaturesOfPetitionInput): SignatureConnection!
    @aws_cognito_user_pools
  status: PetitionStatus!
  type: PetitionType!
  updatedAt: AWSDateTime!
  version: Int!
}

type CodeSubmissionResult @aws_iam {
  error: Boolean!
  message: String!
}

type IssuePetition implements Petition @aws_cognito_user_pools @aws_iam {
  PK: ID!
  createdAt: AWSDateTime!
  detail: String!
  owner: ID!
  signatureSummary: SignatureSummary
  signatures(query: SignaturesOfPetitionInput): SignatureConnection!
    @aws_cognito_user_pools
  status: PetitionStatus!
  title: String!
  type: PetitionType!
  updatedAt: AWSDateTime!
  version: Int!
}

type Mutation {
  approvePetition(data: ApprovePetitionInput!): Petition
    @aws_cognito_user_pools(cognito_groups: ["CityStaffGroup", "AdminGroup"])
  createStaffUser(data: StaffUserInput!): User!
    @aws_cognito_user_pools(cognito_groups: ["AdminGroup"])
  deleteStaffUser(username: ID!): Boolean!
    @aws_cognito_user_pools(cognito_groups: ["AdminGroup"])
  editCandidatePetition(data: EditCandidatePetitionInput!): CandidatePetition
    @aws_cognito_user_pools(cognito_groups: ["PetitionerGroup"])
  editIssuePetition(data: EditIssuePetitionInput!): IssuePetition
    @aws_cognito_user_pools(cognito_groups: ["PetitionerGroup"])
  rejectPetition(data: TargetPetitionInput!): Petition
    @aws_cognito_user_pools(cognito_groups: ["CityStaffGroup", "AdminGroup"])
  submitCandidatePetition(data: CandidatePetitionInput!): CandidatePetition!
    @aws_cognito_user_pools(cognito_groups: ["PetitionerGroup"])
  submitIssuePetition(data: IssuePetitionInput!): IssuePetition!
    @aws_cognito_user_pools(cognito_groups: ["PetitionerGroup"])
  submitSignature(data: SignatureVerificationInput!): SignatureVerification!
    @aws_iam
  submitVerificationCode(code: ID!): CodeSubmissionResult! @aws_iam
  updateSiteConfiguration(data: SiteConfigurationInput!): SiteConfiguration!
    @aws_cognito_user_pools(cognito_groups: ["AdminGroup"])
  updateUserAccess(data: UpdateUserAccessInput!): User!
    @aws_cognito_user_pools(cognito_groups: ["AdminGroup"])
}

type PetitionConnection @aws_cognito_user_pools @aws_iam {
  items: [Petition!]!
  token: ID
}

type Query {
  getPetition(PK: ID!): Petition @aws_cognito_user_pools @aws_iam
  getPetitionsByOwner(query: PetitionsByOwnerInput): PetitionConnection!
    @aws_cognito_user_pools
  getPetitionsByType(query: PetitionsByTypeInput): PetitionConnection!
    @aws_cognito_user_pools
    @aws_iam
  getResourceUploadURL(query: GetResourceUploadURLInput!): String
    @aws_cognito_user_pools(cognito_groups: ["AdminGroup"])
  getResourceVersion(query: GetResourceVersionInput!): String
    @aws_cognito_user_pools(cognito_groups: ["AdminGroup"])
  getSignaturesByPetition(
    query: SignaturesByPetitionInput
  ): SignatureConnection! @aws_cognito_user_pools
  getSiteResources(query: ListResourcesInput!): ResourceConnection!
    @aws_cognito_user_pools(cognito_groups: ["AdminGroup"])
  getUsers(query: SearchUsersInput): UserConnection!
    @aws_cognito_user_pools(cognito_groups: ["AdminGroup"])
  getVoterRecordMatch(query: VoterRecordMatchInput!): VoterRecordMatch! @aws_iam
  publicEcho(ping: String!): String!
  siteConfiguration: SiteConfiguration! @aws_cognito_user_pools @aws_iam
}

type ResourceConnection @aws_cognito_user_pools @aws_iam {
  items: [String!]!
  token: ID
}

type Signature @aws_cognito_user_pools {
  address: String!
  createdAt: AWSDateTime!
  name: String!
  signer: ID!
  status: SignatureStatus!
  updatedAt: AWSDateTime!
}

type SignatureConnection @aws_cognito_user_pools {
  items: [Signature!]!
  token: ID
}

type SignatureSummary @aws_cognito_user_pools @aws_iam {
  approved: Int
    @aws_cognito_user_pools(
      cognito_groups: ["AdminGroup", "CityStaffGroup", "GuestStaffGroup"]
    )
  deadline: AWSDateTime
  rejected: Int
    @aws_cognito_user_pools(
      cognito_groups: ["AdminGroup", "CityStaffGroup", "GuestStaffGroup"]
    )
  required: Int
  submitted: Int
  verified: Int
}

type SignatureVerification @aws_iam {
  address: String!
  city: String!
  confirmationRequired: Boolean!
  error: String
  fullName: String!
  id: ID
  method: VerificationMethod!
  methodPayload: [String]!
  state: String!
  title: String
  token: String!
  zipCode: String!
}

type SiteConfiguration @aws_cognito_user_pools @aws_iam {
  buttonColor: ID
  headerColor: ID
  highlightColor: ID
  logoImage: ID
  version: Int!
}

type Subscription {
  updatedSiteConfiguration: SiteConfiguration
    @aws_cognito_user_pools
    @aws_iam
    @aws_subscribe(mutations: ["updateSiteConfiguration"])
}

type User @aws_cognito_user_pools {
  email: String!
  firstName: String
  lastName: String
  permissions: AccessLevel!
  username: ID!
}

type UserConnection @aws_cognito_user_pools {
  items: [User!]!
  token: ID
}

type VoterRecordMatch @aws_iam {
  address: String!
  city: String!
  fullName: String!
  methods: [String!]!
  state: String!
  token: String
  zipCode: String!
}

enum AccessLevel {
  ADMIN
  GUEST
  NONE
  PETITIONER
  STAFF
}

enum AccessLevelQuery {
  ADMIN
  GUEST
  PETITIONER
  STAFF
}

enum AssetType {
  LOGO
}

enum PetitionStatus {
  ACTIVE
  CANCELED
  NEW
  NOT_QUALIFIED
  QUALIFIED
  REJECTED
  WITHDRAWN
}

enum PetitionStatusQuery {
  ACTIVE
  ANY
  CANCELED
  INACTIVE
  NEW
  NOT_QUALIFIED
  QUALIFIED
  REJECTED
  WITHDRAWN
}

enum PetitionType {
  CANDIDATE
  ISSUE
}

enum SignatureStatus {
  APPROVED
  REJECTED
  SUBMITTED
  VERIFIED
}

enum SignatureStatusQuery {
  ANY
  APPROVED
  REJECTED
  SUBMITTED
  VERIFIED
}

enum StaffAccessLevel {
  ADMIN
  GUEST
  STAFF
}

enum VerificationMethod {
  CALL
  EMAIL
  POSTAL
  STATE_ID
  TEXT
}

input AddressInput {
  address: String!
  city: String
  number: String
  state: String!
  zipCode: String
}

input ApprovePetitionInput {
  PK: ID!
  deadline: AWSDateTime!
  expectedVersion: Int!
  requiredSignatures: Int!
}

input CandidatePetitionInput {
  address: AddressInput!
  name: String!
  office: ID!
  party: ID!
}

input EditCandidatePetitionInput {
  PK: ID!
  address: AddressInput
  expectedVersion: Int!
  office: ID
  party: ID
}

input EditIssuePetitionInput {
  PK: ID!
  detail: String
  expectedVersion: Int!
  title: String
}

input GetResourceUploadURLInput {
  type: AssetType!
}

input GetResourceVersionInput {
  type: AssetType!
}

input IssuePetitionInput {
  detail: String!
  title: String!
}

input ListResourcesInput {
  cursor: ID
  limit: Int
  type: AssetType!
}

input PetitionsByOwnerInput {
  cursor: ID
  limit: Int
  owner: ID!
  status: PetitionStatusQuery
}

input PetitionsByTypeInput {
  cursor: ID
  limit: Int
  status: PetitionStatusQuery
  type: PetitionType
}

input SearchUsersInput {
  cursor: ID
  limit: Int
  searchEmail: String
  searchGroup: AccessLevelQuery
  searchName: String
}

input SignatureVerificationInput {
  address: String!
  city: String!
  fullName: String!
  id: ID
  method: VerificationMethod!
  methodPayload: [String]!
  state: String!
  title: String
  token: String!
  zipCode: String!
}

input SignaturesByPetitionInput {
  cursor: ID
  limit: Int
  petition: ID!
  status: SignatureStatusQuery
}

input SignaturesOfPetitionInput {
  cursor: ID
  limit: Int
  status: SignatureStatusQuery
}

input SiteConfigurationInput {
  buttonColor: ID
  expectedVersion: Int!
  headerColor: ID
  highlightColor: ID
  logoImage: ID
}

input StaffUserInput {
  email: String!
  permissions: StaffAccessLevel!
}

input TargetPetitionInput {
  PK: ID!
  expectedVersion: Int!
}

input UpdateUserAccessInput {
  permissions: AccessLevel!
  username: ID!
}

input VoterRecordMatchInput {
  address: String!
  city: String!
  fullName: String!
  state: String!
  zipCode: String!
}
