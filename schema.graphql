﻿schema {
  query: Query
  mutation: Mutation
}

interface Petition {
  PK: ID!
  createdAt: AWSDateTime!
  owner: ID!
  signatureSummary: SignatureSummary
  status: PetitionStatus!
  type: PetitionType!
  updatedAt: AWSDateTime!
  version: Int!
}

type AddressData @aws_cognito_user_pools @aws_iam {
  address: String!
  city: String
  number: String
  state: String!
  zipCode: String
}

type CandidatePetition implements Petition @aws_cognito_user_pools @aws_iam {
  PK: ID!
  address: AddressData!
  createdAt: AWSDateTime!
  name: String!
  office: ID!
  owner: ID!
  party: ID!
  signatureSummary: SignatureSummary
  status: PetitionStatus!
  type: PetitionType!
  updatedAt: AWSDateTime!
  version: Int!
}

type IssuePetition implements Petition @aws_cognito_user_pools @aws_iam {
  PK: ID!
  createdAt: AWSDateTime!
  detail: String!
  owner: ID!
  signatureSummary: SignatureSummary
  status: PetitionStatus!
  title: String!
  type: PetitionType!
  updatedAt: AWSDateTime!
  version: Int!
}

type Mutation {
  approvePetition(data: TargetPetitionInput!): Petition
    @aws_cognito_user_pools(cognito_groups: ["CityStaffGroup", "AdminGroup"])
  editCandidatePetition(data: EditCandidatePetitionInput!): CandidatePetition
    @aws_cognito_user_pools(cognito_groups: ["PetitionerGroup"])
  editIssuePetition(data: EditIssuePetitionInput!): IssuePetition
    @aws_cognito_user_pools(cognito_groups: ["PetitionerGroup"])
  rejectPetition(data: TargetPetitionInput!): Petition
    @aws_cognito_user_pools(cognito_groups: ["CityStaffGroup", "AdminGroup"])
  submitCandidatePetition(data: CandidatePetitionInput!): CandidatePetition!
    @aws_cognito_user_pools(cognito_groups: ["PetitionerGroup"])
  submitIssuePetition(data: IssuePetitionInput!): IssuePetition!
    @aws_cognito_user_pools(cognito_groups: ["PetitionerGroup"])
}

type PetitionConnection @aws_cognito_user_pools @aws_iam {
  items: [Petition!]!
  token: ID
}

type Query {
  getPetitionsByOwner(query: PetitionsByOwnerInput): PetitionConnection!
    @aws_cognito_user_pools
  getPetitionsByType(query: PetitionsByTypeInput): PetitionConnection!
    @aws_cognito_user_pools
    @aws_iam
  publicEcho(ping: String!): String!
}

type SignatureSummary @aws_cognito_user_pools @aws_iam {
  approved: Int!
  deadline: AWSDateTime
  required: Int!
  submitted: Int!
    @aws_cognito_user_pools(cognito_groups: ["AdminGroup", "CityStaffGroup"])
}

enum PetitionListStatusCheck {
  ACTIVE
  ANY
  CANCELED
  INACTIVE
  NEW
  NOT_QUALIFIED
  QUALIFIED
  REJECTED
  WITHDRAWN
}

enum PetitionStatus {
  ACTIVE
  CANCELED
  NEW
  NOT_QUALIFIED
  QUALIFIED
  REJECTED
  WITHDRAWN
}

enum PetitionType {
  CANDIDATE
  ISSUE
}

input AddressInput {
  address: String!
  city: String
  number: String
  state: String!
  zipCode: String
}

input CandidatePetitionInput {
  address: AddressInput!
  name: String!
  office: ID!
  party: ID!
}

input EditCandidatePetitionInput {
  PK: ID!
  address: AddressInput
  expectedVersion: Int!
  office: ID
  party: ID
}

input EditIssuePetitionInput {
  PK: ID!
  detail: String
  expectedVersion: Int!
  title: String
}

input IssuePetitionInput {
  detail: String!
  title: String!
}

input PetitionsByOwnerInput {
  cursor: ID
  limit: Int
  owner: ID!
  status: PetitionListStatusCheck
}

input PetitionsByTypeInput {
  cursor: ID
  limit: Int
  status: PetitionListStatusCheck
  type: PetitionType
}

input TargetPetitionInput {
  PK: ID!
  expectedVersion: Int!
}
